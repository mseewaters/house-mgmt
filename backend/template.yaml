AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: House Management System - Backend Infrastructure

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Environment name
  AllowedIPs:
    Type: CommaDelimitedList
    Default: "0.0.0.0/0"
    Description: IP addresses allowed to access the API

Globals:
  Function:
    Runtime: python3.13
    MemorySize: 512
    Timeout: 30
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref HouseMgmtTable
        S3_WEATHER_BUCKET: !Ref WeatherDataBucket
        LOG_LEVEL: INFO
        ENVIRONMENT: !Ref Environment

Resources:
  # DynamoDB Table for all house management data
  HouseMgmtTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "house-mgmt-${Environment}"
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK  
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true

  # S3 Bucket for weather data caching
  WeatherDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "house-mgmt-weather-${Environment}-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # Main API Lambda Function
  HouseMgmtApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "house-mgmt-api-${Environment}"
      CodeUri: src/house_mgmt/
      Handler: main.handler
      Events:
        RootApi:
          Type: Api
          Properties:
            Path: /
            Method: ANY
        Api:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref HouseMgmtTable
        - S3CrudPolicy:
            BucketName: !Ref WeatherDataBucket
        - SSMParameterReadPolicy:
            ParameterName: "house-mgmt/openweather-api-key"

  # Background task generation Lambda
  TaskGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "house-mgmt-task-generator-${Environment}"
      CodeUri: src/house_mgmt/
      Handler: lambdas.task_generation_handler.lambda_handler
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: "cron(5 6 ? * * *)"  # 5 AM UTC = Midnight EST
            Description: "Generate daily tasks at local midnight"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref HouseMgmtTable

  # Weather update Lambda
  WeatherUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "house-mgmt-weather-${Environment}"
      CodeUri: src/house_mgmt/
      Handler: lambdas.weather_update_handler.lambda_handler
      Events:
        WeatherSchedule:
          Type: Schedule
          Properties:
            Schedule: "rate(30 minutes)"
            Description: "Update weather data every 30 minutes"
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref WeatherDataBucket
        - SSMParameterReadPolicy:
            ParameterName: "house-mgmt/openweather-api-key"

  # Task status update Lambda  
  TaskStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "house-mgmt-task-status-${Environment}"
      CodeUri: src/house_mgmt/
      Handler: lambdas.task_status_handler.lambda_handler
      Events:
        HourlySchedule:
          Type: Schedule
          Properties:
            Schedule: "cron(0 * * * ? *)"  # Every hour at minute 0
            Description: "Update task statuses hourly (pending -> overdue -> cleared)"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref HouseMgmtTable

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Stage"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
  
  DynamoDBTable:
    Description: "DynamoDB table name"
    Value: !Ref HouseMgmtTable
    Export:
      Name: !Sub "${AWS::StackName}-TableName"

  WeatherBucket:
    Description: "S3 bucket for weather data"
    Value: !Ref WeatherDataBucket
    Export:
      Name: !Sub "${AWS::StackName}-WeatherBucket"